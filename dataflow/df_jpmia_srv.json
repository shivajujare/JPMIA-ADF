{
	"name": "df_jpmia_srv",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_jpmia_raw_companies",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_jpmia_source_view",
						"type": "DatasetReference"
					},
					"name": "sink1",
					"rejectedDataLinkedService": {
						"referenceName": "ls_adls_jpmia",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     df_fname as string",
				"}",
				"source(output(",
				"          company_id as string,",
				"          name as string,",
				"          description as string,",
				"          company_size as string,",
				"          state as string,",
				"          country as string,",
				"          city as string,",
				"          zip_code as string,",
				"          address as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     multiLineRow: true,",
				"     wildcardPaths:[(concat('companies', $df_fname))],",
				"     partitionBy('hash', 1)) ~> source1",
				"source1 derive(ingestion_date = currentUTC()) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: true,",
				"     partitionFileNames:[($df_fname)],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          company_id,",
				"          name,",
				"          description,",
				"          company_size,",
				"          state,",
				"          country,",
				"          city,",
				"          zip_code,",
				"          address,",
				"          url,",
				"          ingestion_date",
				"     ),",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}